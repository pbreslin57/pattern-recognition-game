<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Pattern Recognition Challenge</title>
    <script src="https://unpkg.com/react@18/umd/react.development.js"></script>
    <script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    <script src="https://unpkg.com/lucide-react@latest/dist/umd/lucide-react.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', sans-serif;
        }
        .min-h-screen { min-height: 100vh; }
        .bg-gradient-to-br { background: linear-gradient(to bottom right, #eff6ff, #e0e7ff); }
        .from-blue-50 { --tw-gradient-from: #eff6ff; }
        .to-indigo-100 { --tw-gradient-to: #e0e7ff; }
        .p-4 { padding: 1rem; }
        .max-w-4xl { max-width: 56rem; }
        .mx-auto { margin-left: auto; margin-right: auto; }
        .text-center { text-align: center; }
        .mb-8 { margin-bottom: 2rem; }
        .mb-6 { margin-bottom: 1.5rem; }
        .mb-4 { margin-bottom: 1rem; }
        .mb-3 { margin-bottom: 0.75rem; }
        .mb-2 { margin-bottom: 0.5rem; }
        .mt-8 { margin-top: 2rem; }
        .mt-4 { margin-top: 1rem; }
        .flex { display: flex; }
        .justify-center { justify-content: center; }
        .justify-between { justify-content: space-between; }
        .items-center { align-items: center; }
        .gap-3 { gap: 0.75rem; }
        .gap-4 { gap: 1rem; }
        .gap-2 { gap: 0.5rem; }
        .text-3xl { font-size: 1.875rem; line-height: 2.25rem; }
        .text-2xl { font-size: 1.5rem; line-height: 2rem; }
        .text-xl { font-size: 1.25rem; line-height: 1.75rem; }
        .text-lg { font-size: 1.125rem; line-height: 1.75rem; }
        .text-sm { font-size: 0.875rem; line-height: 1.25rem; }
        .font-bold { font-weight: 700; }
        .font-semibold { font-weight: 600; }
        .font-mono { font-family: ui-monospace, SFMono-Regular, "SF Mono", Consolas, "Liberation Mono", Menlo, monospace; }
        .text-gray-800 { color: #1f2937; }
        .text-gray-600 { color: #4b5563; }
        .text-gray-500 { color: #6b7280; }
        .text-gray-400 { color: #9ca3af; }
        .text-indigo-600 { color: #4f46e5; }
        .text-yellow-500 { color: #eab308; }
        .text-red-500 { color: #ef4444; }
        .text-yellow-800 { color: #92400e; }
        .text-green-800 { color: #166534; }
        .text-red-800 { color: #991b1b; }
        .text-blue-800 { color: #1e40af; }
        .text-blue-700 { color: #1d4ed8; }
        .text-white { color: #ffffff; }
        .bg-white { background-color: #ffffff; }
        .bg-gray-50 { background-color: #f9fafb; }
        .bg-gray-400 { background-color: #9ca3af; }
        .bg-gray-500 { background-color: #6b7280; }
        .bg-gray-600 { background-color: #4b5563; }
        .bg-indigo-600 { background-color: #4f46e5; }
        .bg-indigo-700 { background-color: #4338ca; }
        .bg-green-600 { background-color: #16a34a; }
        .bg-green-700 { background-color: #15803d; }
        .bg-yellow-500 { background-color: #eab308; }
        .bg-yellow-600 { background-color: #ca8a04; }
        .bg-yellow-50 { background-color: #fefce8; }
        .bg-yellow-100 { background-color: #fef3c7; }
        .bg-green-50 { background-color: #f0fdf4; }
        .bg-red-50 { background-color: #fef2f2; }
        .bg-blue-50 { background-color: #eff6ff; }
        .rounded-lg { border-radius: 0.5rem; }
        .rounded { border-radius: 0.25rem; }
        .shadow-lg { box-shadow: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1); }
        .shadow { box-shadow: 0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1); }
        .border { border-width: 1px; border-color: #d1d5db; }
        .border-2 { border-width: 2px; }
        .border-yellow-200 { border-color: #fde047; }
        .border-yellow-300 { border-color: #facc15; }
        .border-green-200 { border-color: #bbf7d0; }
        .border-red-200 { border-color: #fecaca; }
        .border-blue-200 { border-color: #bfdbfe; }
        .px-8 { padding-left: 2rem; padding-right: 2rem; }
        .px-6 { padding-left: 1.5rem; padding-right: 1.5rem; }
        .px-4 { padding-left: 1rem; padding-right: 1rem; }
        .py-3 { padding-top: 0.75rem; padding-bottom: 0.75rem; }
        .py-2 { padding-top: 0.5rem; padding-bottom: 0.5rem; }
        .p-6 { padding: 1.5rem; }
        .p-8 { padding: 2rem; }
        .p-4 { padding: 1rem; }
        .w-8 { width: 2rem; }
        .w-6 { width: 1.5rem; }
        .w-5 { width: 1.25rem; }
        .w-4 { width: 1rem; }
        .h-8 { height: 2rem; }
        .h-6 { height: 1.5rem; }
        .h-5 { height: 1.25rem; }
        .h-4 { height: 1rem; }
        .grid { display: grid; }
        .grid-cols-2 { grid-template-columns: repeat(2, minmax(0, 1fr)); }
        .grid-cols-4 { grid-template-columns: repeat(4, minmax(0, 1fr)); }
        .space-y-1 > * + * { margin-top: 0.25rem; }
        .hover\:bg-indigo-700:hover { background-color: #4338ca; }
        .hover\:bg-green-700:hover { background-color: #15803d; }
        .hover\:bg-yellow-600:hover { background-color: #ca8a04; }
        .hover\:bg-gray-600:hover { background-color: #4b5563; }
        .disabled\:bg-gray-400:disabled { background-color: #9ca3af; }
        .transition-colors { transition-property: color, background-color, border-color, text-decoration-color, fill, stroke; transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1); transition-duration: 150ms; }
        .focus\:outline-none:focus { outline: 2px solid transparent; outline-offset: 2px; }
        .focus\:ring-2:focus { --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color); --tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(2px + var(--tw-ring-offset-width)) var(--tw-ring-color); box-shadow: var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow, 0 0 #0000); }
        .focus\:ring-indigo-500:focus { --tw-ring-color: #6366f1; }
        button { cursor: pointer; }
        button:disabled { cursor: not-allowed; }
        input { border: 1px solid #d1d5db; }
        @media (min-width: 768px) {
            .md\:grid-cols-4 { grid-template-columns: repeat(4, minmax(0, 1fr)); }
            .md\:grid-cols-2 { grid-template-columns: repeat(2, minmax(0, 1fr)); }
        }
    </style>
</head>
<body>
    <div id="root"></div>

    <script type="text/babel">
        const { useState, useEffect } = React;
        const { Brain, Clock, Trophy, HelpCircle, ArrowRight, RotateCcw } = lucideReact;

        const PatternRecognitionGame = () => {
            const [currentLevel, setCurrentLevel] = useState(1);
            const [score, setScore] = useState(0);
            const [timeLeft, setTimeLeft] = useState(60);
            const [gameActive, setGameActive] = useState(false);
            const [currentPattern, setCurrentPattern] = useState(null);
            const [userAnswer, setUserAnswer] = useState('');
            const [showExplanation, setShowExplanation] = useState(false);
            const [feedback, setFeedback] = useState('');
            const [hintsUsed, setHintsUsed] = useState(0);
            const [showHint, setShowHint] = useState(false);
            const [correctAnswers, setCorrectAnswers] = useState(0);
            const [totalQuestions, setTotalQuestions] = useState(0);

            // Pattern generators
            const patterns = {
                arithmetic: {
                    generate: (level) => {
                        const start = Math.floor(Math.random() * 10) + 1;
                        const diff = Math.floor(Math.random() * 5) + 1 + level;
                        const sequence = [];
                        for (let i = 0; i < 4 + Math.floor(level / 2); i++) {
                            sequence.push(start + i * diff);
                        }
                        return {
                            sequence,
                            answer: start + sequence.length * diff,
                            rule: `Add ${diff} each time`,
                            hint: `Look at the difference between consecutive numbers`,
                            type: 'Arithmetic Sequence'
                        };
                    }
                },
                geometric: {
                    generate: (level) => {
                        const start = Math.floor(Math.random() * 3) + 2;
                        const ratio = Math.floor(Math.random() * 3) + 2;
                        const sequence = [];
                        for (let i = 0; i < 3 + Math.floor(level / 3); i++) {
                            sequence.push(start * Math.pow(ratio, i));
                        }
                        return {
                            sequence,
                            answer: start * Math.pow(ratio, sequence.length),
                            rule: `Multiply by ${ratio} each time`,
                            hint: `Try dividing each number by the previous one`,
                            type: 'Geometric Sequence'
                        };
                    }
                },
                fibonacci: {
                    generate: (level) => {
                        const sequence = level > 3 ? [1, 1, 2, 3, 5, 8] : [1, 1, 2, 3, 5];
                        return {
                            sequence,
                            answer: sequence[sequence.length - 1] + sequence[sequence.length - 2],
                            rule: 'Each number is the sum of the two preceding numbers',
                            hint: 'Try adding the last two numbers together',
                            type: 'Fibonacci Sequence'
                        };
                    }
                },
                squares: {
                    generate: (level) => {
                        const start = Math.floor(Math.random() * 3) + 1;
                        const sequence = [];
                        for (let i = 0; i < 4; i++) {
                            sequence.push(Math.pow(start + i, 2));
                        }
                        return {
                            sequence,
                            answer: Math.pow(start + sequence.length, 2),
                            rule: `Perfect squares starting from ${start}²`,
                            hint: 'These might be perfect squares',
                            type: 'Square Numbers'
                        };
                    }
                },
                primes: {
                    generate: (level) => {
                        const primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29];
                        const length = Math.min(4 + Math.floor(level / 4), 6);
                        const sequence = primes.slice(0, length);
                        return {
                            sequence,
                            answer: primes[length],
                            rule: 'Prime numbers in ascending order',
                            hint: 'These are all prime numbers',
                            type: 'Prime Numbers'
                        };
                    }
                }
            };

            // Generate a new pattern based on current level
            const generatePattern = () => {
                const patternTypes = Object.keys(patterns);
                let availableTypes = patternTypes;
                
                // Introduce more complex patterns at higher levels
                if (currentLevel < 3) {
                    availableTypes = ['arithmetic', 'geometric'];
                } else if (currentLevel < 6) {
                    availableTypes = ['arithmetic', 'geometric', 'fibonacci', 'squares'];
                }
                
                const randomType = availableTypes[Math.floor(Math.random() * availableTypes.length)];
                const pattern = patterns[randomType].generate(currentLevel);
                setCurrentPattern(pattern);
                setUserAnswer('');
                setShowExplanation(false);
                setShowHint(false);
                setFeedback('');
            };

            // Start the game
            const startGame = () => {
                setGameActive(true);
                setScore(0);
                setCurrentLevel(1);
                setTimeLeft(60);
                setCorrectAnswers(0);
                setTotalQuestions(0);
                setHintsUsed(0);
                generatePattern();
            };

            // Timer effect
            useEffect(() => {
                if (gameActive && timeLeft > 0) {
                    const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);
                    return () => clearTimeout(timer);
                } else if (timeLeft === 0) {
                    setGameActive(false);
                }
            }, [gameActive, timeLeft]);

            // Check answer
            const checkAnswer = () => {
                if (!currentPattern || !userAnswer) return;
                
                const isCorrect = parseInt(userAnswer) === currentPattern.answer;
                setTotalQuestions(prev => prev + 1);
                
                if (isCorrect) {
                    const basePoints = 100;
                    const levelBonus = currentLevel * 10;
                    const timeBonus = Math.floor(timeLeft / 10) * 5;
                    const hintPenalty = hintsUsed * 10;
                    const points = Math.max(basePoints + levelBonus + timeBonus - hintPenalty, 50);
                    
                    setScore(prev => prev + points);
                    setCorrectAnswers(prev => prev + 1);
                    setFeedback(`Correct! +${points} points`);
                    
                    // Level up every 3 correct answers
                    if ((correctAnswers + 1) % 3 === 0) {
                        setCurrentLevel(prev => prev + 1);
                    }
                } else {
                    setFeedback(`Incorrect. The answer was ${currentPattern.answer}`);
                }
                
                setShowExplanation(true);
            };

            // Next question
            const nextQuestion = () => {
                generatePattern();
                setHintsUsed(0);
            };

            // Show hint
            const showHintHandler = () => {
                if (!showHint) {
                    setHintsUsed(prev => prev + 1);
                    setShowHint(true);
                }
            };

            // Reset game
            const resetGame = () => {
                setGameActive(false);
                setCurrentPattern(null);
                setShowExplanation(false);
                setFeedback('');
            };

            return (
                <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 p-4">
                    <div className="max-w-4xl mx-auto">
                        {/* Header */}
                        <div className="text-center mb-8">
                            <div className="flex justify-center items-center gap-3 mb-4">
                                <Brain className="w-8 h-8 text-indigo-600" />
                                <h1 className="text-3xl font-bold text-gray-800">Pattern Recognition Challenge</h1>
                            </div>
                            <p className="text-gray-600">Sharpen your critical thinking with pattern analysis</p>
                        </div>

                        {/* Game Stats */}
                        {gameActive && (
                            <div className="bg-white rounded-lg shadow-lg p-6 mb-6">
                                <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-center">
                                    <div className="flex items-center justify-center gap-2">
                                        <Trophy className="w-5 h-5 text-yellow-500" />
                                        <span className="font-semibold">Score: {score}</span>
                                    </div>
                                    <div className="flex items-center justify-center gap-2">
                                        <Clock className="w-5 h-5 text-red-500" />
                                        <span className="font-semibold">Time: {timeLeft}s</span>
                                    </div>
                                    <div>
                                        <span className="font-semibold">Level: {currentLevel}</span>
                                    </div>
                                    <div>
                                        <span className="font-semibold">Accuracy: {totalQuestions > 0 ? Math.round((correctAnswers / totalQuestions) * 100) : 0}%</span>
                                    </div>
                                </div>
                            </div>
                        )}

                        {/* Game Area */}
                        <div className="bg-white rounded-lg shadow-lg p-8">
                            {!gameActive && !currentPattern ? (
                                <div className="text-center">
                                    <h2 className="text-2xl font-bold mb-4">Ready to Test Your Pattern Recognition?</h2>
                                    <p className="text-gray-600 mb-6">
                                        Identify patterns in sequences and predict the next number. 
                                        Progress through increasingly complex challenges that will strengthen your analytical thinking.
                                    </p>
                                    <button
                                        onClick={startGame}
                                        className="bg-indigo-600 text-white px-8 py-3 rounded-lg hover:bg-indigo-700 transition-colors font-semibold"
                                    >
                                        Start Challenge
                                    </button>
                                </div>
                            ) : gameActive && currentPattern ? (
                                <div>
                                    <div className="mb-6">
                                        <div className="flex justify-between items-center mb-4">
                                            <h3 className="text-xl font-semibold">Find the Pattern</h3>
                                            <span className="text-sm text-gray-500">{currentPattern.type}</span>
                                        </div>
                                        
                                        {/* Pattern Display */}
                                        <div className="bg-gray-50 p-6 rounded-lg mb-6">
                                            <div className="flex items-center justify-center gap-4 text-2xl font-mono">
                                                {currentPattern.sequence.map((num, index) => (
                                                    <span key={index} className="bg-white px-4 py-2 rounded shadow">
                                                        {num}
                                                    </span>
                                                ))}
                                                <ArrowRight className="w-6 h-6 text-gray-400" />
                                                <span className="bg-yellow-100 px-4 py-2 rounded shadow border-2 border-yellow-300">
                                                    ?
                                                </span>
                                            </div>
                                        </div>

                                        {/* Answer Input */}
                                        {!showExplanation && (
                                            <div className="flex gap-4 justify-center items-center mb-4">
                                                <input
                                                    type="number"
                                                    value={userAnswer}
                                                    onChange={(e) => setUserAnswer(e.target.value)}
                                                    placeholder="Enter the next number"
                                                    className="px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500"
                                                    onKeyPress={(e) => e.key === 'Enter' && checkAnswer()}
                                                />
                                                <button
                                                    onClick={checkAnswer}
                                                    disabled={!userAnswer}
                                                    className="bg-green-600 text-white px-6 py-2 rounded-lg hover:bg-green-700 disabled:bg-gray-400 transition-colors"
                                                >
                                                    Submit
                                                </button>
                                                <button
                                                    onClick={showHintHandler}
                                                    className="bg-yellow-500 text-white px-4 py-2 rounded-lg hover:bg-yellow-600 transition-colors flex items-center gap-2"
                                                >
                                                    <HelpCircle className="w-4 h-4" />
                                                    Hint (-10 pts)
                                                </button>
                                            </div>
                                        )}

                                        {/* Hint */}
                                        {showHint && !showExplanation && (
                                            <div className="bg-yellow-50 border border-yellow-200 p-4 rounded-lg mb-4">
                                                <p className="text-yellow-800"><strong>Hint:</strong> {currentPattern.hint}</p>
                                            </div>
                                        )}

                                        {/* Feedback */}
                                        {feedback && (
                                            <div className={`p-4 rounded-lg mb-4 ${
                                                feedback.includes('Correct') 
                                                    ? 'bg-green-50 border border-green-200 text-green-800' 
                                                    : 'bg-red-50 border border-red-200 text-red-800'
                                            }`}>
                                                <p className="font-semibold">{feedback}</p>
                                            </div>
                                        )}

                                        {/* Explanation */}
                                        {showExplanation && (
                                            <div className="bg-blue-50 border border-blue-200 p-4 rounded-lg mb-4">
                                                <h4 className="font-semibold text-blue-800 mb-2">Pattern Explanation:</h4>
                                                <p className="text-blue-700">{currentPattern.rule}</p>
                                                <button
                                                    onClick={nextQuestion}
                                                    className="mt-4 bg-indigo-600 text-white px-6 py-2 rounded-lg hover:bg-indigo-700 transition-colors"
                                                >
                                                    Next Pattern →
                                                </button>
                                            </div>
                                        )}
                                    </div>
                                </div>
                            ) : (
                                <div className="text-center">
                                    <h2 className="text-2xl font-bold mb-4">Game Over!</h2>
                                    <div className="mb-6">
                                        <p className="text-lg mb-2">Final Score: <span className="font-bold text-indigo-600">{score}</span></p>
                                        <p className="text-lg mb-2">Level Reached: <span className="font-bold">{currentLevel}</span></p>
                                        <p className="text-lg mb-4">Accuracy: <span className="font-bold">{totalQuestions > 0 ? Math.round((correctAnswers / totalQuestions) * 100) : 0}%</span></p>
                                    </div>
                                    <div className="flex gap-4 justify-center">
                                        <button
                                            onClick={startGame}
                                            className="bg-indigo-600 text-white px-6 py-3 rounded-lg hover:bg-indigo-700 transition-colors"
                                        >
                                            Play Again
                                        </button>
                                        <button
                                            onClick={resetGame}
                                            className="bg-gray-500 text-white px-6 py-3 rounded-lg hover:bg-gray-600 transition-colors flex items-center gap-2"
                                        >
                                            <RotateCcw className="w-4 h-4" />
                                            Reset
                                        </button>
                                    </div>
                                </div>
                            )}
                        </div>

                        {/* Instructions */}
                        <div className="mt-8 bg-white rounded-lg shadow-lg p-6">
                            <h3 className="text-lg font-semibold mb-3">How to Play</h3>
                            <div className="grid md:grid-cols-2 gap-4 text-sm text-gray-600">
                                <div>
                                    <h4 className="font-semibold text-gray-800 mb-2">Scoring:</h4>
                                    <ul className="space-y-1">
                                        <li>• Base points: 100 per correct answer</li>
                                        <li>• Level bonus: +10 points × current level</li>
                                        <li>• Time bonus: +5 points per 10 seconds remaining</li>
                                        <li>• Hint penalty: -10 points per hint used</li>
                                    </ul>
                                </div>
                                <div>
                                    <h4 className="font-semibold text-gray-800 mb-2">Tips:</h4>
                                    <ul className="space-y-1">
                                        <li>• Look for arithmetic differences between numbers</li>
                                        <li>• Check for multiplication or division patterns</li>
                                        <li>• Consider mathematical sequences (squares, primes)</li>
                                        <li>• Use hints wisely to maintain your score</li>
                                    </ul>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            );
        };

        const root = ReactDOM.createRoot(document.getElementById('root'));
        root.render(<PatternRecognitionGame />);
    </script>
</body>
</html>